"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[464],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(a),h=o,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||r;return a?n.createElement(m,i(i({ref:t},c),{},{components:a})):n.createElement(m,i({ref:t},c))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<r;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),o=a(6010);const r={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,i),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>v});var n=a(7462),o=a(7294),r=a(6010),i=a(2466),s=a(6550),l=a(1980),u=a(7392),c=a(12);function p(e){return function(e){return o.Children.map(e,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:o}}=e;return{value:t,label:a,attributes:n,default:o}}))}function d(e){const{values:t,children:a}=e;return(0,o.useMemo)((()=>{const e=t??p(a);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function h(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:a}=e;const n=(0,s.k6)(),r=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,l._X)(r),(0,o.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})}),[r,n])]}function g(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,r=d(e),[i,s]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r}))),[l,u]=m({queryString:a,groupId:n}),[p,g]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,r]=(0,c.Nk)(a);return[n,(0,o.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:n}),y=(()=>{const e=l??p;return h({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{y&&s(y)}),[y]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),g(e)}),[u,g,r]),tabValues:r}}var y=a(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:t,block:a,selectedValue:s,selectValue:l,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),d=e=>{const t=e.currentTarget,a=c.indexOf(t),n=u[a].value;n!==s&&(p(t),l(n))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;t=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;t=c[a]??c[c.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:i}=e;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>c.push(e),onKeyDown:h,onClick:d},i,{className:(0,r.Z)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":s===t})}),a??t)})))}function f(e){let{lazy:t,children:a,selectedValue:n}=e;if(a=Array.isArray(a)?a:[a],t){const e=a.find((e=>e.props.value===n));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function w(e){const t=g(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",b.tabList)},o.createElement(k,(0,n.Z)({},e,t)),o.createElement(f,(0,n.Z)({},e,t)))}function v(e){const t=(0,y.Z)();return o.createElement(w,(0,n.Z)({key:String(t)},e))}},6404:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var n=a(7462),o=(a(7294),a(3905)),r=a(4866),i=a(5162);const s={sidebar_position:2},l="Developer guide",u={unversionedId:"guides/developers",id:"guides/developers",title:"Developer guide",description:"This guide will provide steps that a developer can take to secure their development environment, and contributions to software projects.",source:"@site/docs/guides/developers.mdx",sourceDirName:"guides",slug:"/guides/developers",permalink:"/secure-software-supply-chain-guide/docs/guides/developers",draft:!1,editUrl:"https://github.com/YubicoLabs/secure-software-supply-chain-guide/tree/main/docs/docs/guides/developers.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Administrator guide",permalink:"/secure-software-supply-chain-guide/docs/guides/administrators"},next:{title:"Deployments",permalink:"/secure-software-supply-chain-guide/docs/guides/deployments"}},c={},p=[{value:"Overview",id:"overview",level:2},{value:"5 minute quickstart",id:"5-minute-quickstart",level:2},{value:"Account protection",id:"account-protection",level:2},{value:"Browser authentication",id:"browser-authentication",level:3},{value:"SSH authentication",id:"ssh-authentication",level:3},{value:"Generate an SSH key",id:"generate-an-ssh-key",level:4},{value:"Add the SSH key to your account",id:"add-the-ssh-key-to-your-account",level:4},{value:"Commit Signing",id:"commit-signing",level:2},{value:"Using SSH",id:"using-ssh",level:3},{value:"Using GPG",id:"using-gpg",level:3}],d={toc:p},h="wrapper";function m(e){let{components:t,...s}=e;return(0,o.kt)(h,(0,n.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"developer-guide"},"Developer guide"),(0,o.kt)("p",null,"This guide will provide steps that a developer can take to secure their development environment, and contributions to software projects."),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"This guide is not only meant for developers; this can be used to provide guidance to any member of a project or organization who is contributing code, configurations, assets, or content to a software project."),(0,o.kt)("p",null,"The key here is to provide quickstart methods that can be quickly leveraged by any of the personas listed above, even when they don\u2019t have experience leveraging technologies like the YubiKey, SSH, or GPG; it\u2019s not important for them to understand HOW these tools work, it\u2019s only important that the experience in setting up these tools is seamless."),(0,o.kt)("p",null,"This guide will provide steps on how to register your YubiKey as a 2FA factor, how to generate an SSH key for authenticating to git without a username/password, and how to generate an SSH or GPG key for commit signing."),(0,o.kt)("h2",{id:"5-minute-quickstart"},"5 minute quickstart"),(0,o.kt)("p",null,"If you don't want to read all of the content below, then just perform the following actions to quickly bootstrap your account and environment. These steps will add a security key to your account for browser authentication, and generate/add an SSH key to your account for git authentication and commit signing."),(0,o.kt)("ol",{style:{fontWeight:"bold"}},(0,o.kt)("li",null,"Secure your account with a security key")),(0,o.kt)(r.Z,{groupId:"source-control-type",className:"my_tabs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"GitHub",label:"GitHub",default:!0,mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa/configuring-two-factor-authentication#configuring-two-factor-authentication-using-a-security-key"},"Configuring two-factor authentication using a security key"))),(0,o.kt)(i.Z,{value:"GitLab",label:"GitLab",mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/user/profile/account/two_factor_authentication.html#set-up-a-webauthn-device"},"Set up a WebAuthn device")))),(0,o.kt)("ol",{style:{fontWeight:"bold"},start:"2"},(0,o.kt)("li",null,"Follow the steps below")),(0,o.kt)(r.Z,{groupId:"source-control-type",className:"my_tabs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"GitHub",label:"GitHub",default:!0,mdxType:"TabItem"},(0,o.kt)("div",null,(0,o.kt)("ol",null,(0,o.kt)("li",null,"Clone the repository"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/YubicoLabs/secure-software-supply-chain-guide.git\n")),(0,o.kt)("div",null,(0,o.kt)("ol",{start:"2"},(0,o.kt)("li",null,"Navigate to the scripts folder"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd secure-software-supply-chain-guide/scripts\n")),(0,o.kt)("div",null,(0,o.kt)("ol",{start:"3"},(0,o.kt)("li",null,"Run the command"))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Note that the script below will create an SSH key that will be used for BOTH authentication and signing")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Replace my_email@test.com with your email address\n\n./Bootstrap_ssh.sh my_email@test.com\n# Follow along with the steps presented by the terminal prompts\n")),(0,o.kt)("div",null,(0,o.kt)("ol",{start:"4"},(0,o.kt)("li",null,"If your account leverages SSO"," ",(0,o.kt)("a",{href:"https://docs.github.com/en/enterprise-cloud@latest/authentication/authenticating-with-saml-single-sign-on/authorizing-an-ssh-key-for-use-with-saml-single-sign-on#authorizing-an-ssh-key"},"follow these steps to authorize your new SSH key"))))),(0,o.kt)(i.Z,{value:"GitLab",label:"GitLab",mdxType:"TabItem"},(0,o.kt)("p",null,"Not currently available, please use the ",(0,o.kt)("a",{parentName:"p",href:"#ssh-authentication"},"manual steps below"),"."))),(0,o.kt)("h2",{id:"account-protection"},"Account protection"),(0,o.kt)("p",null,"For the developer persona, there are two cases of account protection. The first relates to authentication from the browser; a developer may be looking to view their repository from the web, or may be conducting a browser based authentication flow opened from a native or CLI based application."),(0,o.kt)("p",null,"The second case is around git authentication from the CLI. While many of the primary source control providers come with a CLI tool that can leverage browser based authentication, your developers may be looking for a more seamless experience where they can rely on SSH based authentication, and not require the use of credentials stored in an accessible way on their machine."),(0,o.kt)("h3",{id:"browser-authentication"},"Browser authentication"),(0,o.kt)("p",null,"Browser based authentication is presented to the user when they attempt to access their account from the browser. The first step for a developer will be to ",(0,o.kt)("strong",{parentName:"p"},"add their security key to their account"),"."),(0,o.kt)(r.Z,{groupId:"source-control-type",className:"my_tabs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"GitHub",label:"GitHub",default:!0,mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa/configuring-two-factor-authentication#configuring-two-factor-authentication-using-a-security-key"},"Configuring two-factor authentication using a security key"))),(0,o.kt)(i.Z,{value:"GitLab",label:"GitLab",mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/user/profile/account/two_factor_authentication.html#set-up-a-webauthn-device"},"Set up a WebAuthn device")))),(0,o.kt)("p",null,"Once the security key is added, the user will then be prompted for it when they ",(0,o.kt)("strong",{parentName:"p"},"attempt to access their account"),"."),(0,o.kt)(r.Z,{groupId:"source-control-type",className:"my_tabs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"GitHub",label:"GitHub",default:!0,mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa/accessing-github-using-two-factor-authentication#using-a-security-key"},"Using a security key"))),(0,o.kt)(i.Z,{value:"GitLab",label:"GitLab",mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/user/profile/account/two_factor_authentication.html#sign-in-using-a-webauthn-device"},"Sign in using a WebAuthn device")))),(0,o.kt)("h3",{id:"ssh-authentication"},"SSH authentication"),(0,o.kt)("p",null,"Traditionally a developer could save their account credentials to a local configuration file that could be used by git to authorize actions. This would have allowed a developer to bypass the entering of their credentials for every git operation. Well, at this point in the documentation, it should be understood that our goal is to prevent the use of phishable credentials, such as usernames and passwords, or long lived authorization tokens on the machine."),(0,o.kt)("p",null,"Locally storing credentials was such an issue, that GitHub banned the use of passwords for git operations. While the GitHub/GitLab CLI tools, mobile apps, and personal access tokens can be used, there is a better way."),(0,o.kt)("p",null,"Git supports the ability to use public key based authentication through SSH; this feature is complimented by the YubiKey's ability to generate SSH keys and to authenticate with them. A benefit to using YubiKey backed SSH keys is the possession factor - an attacker would be unable to perform a git operation without possession of the YubiKey that holds the private key. Another benefit is the YubiKey presents minimal disruption to a developers workflow. If the YubiKey is already present on a user's machine, all they need to do is tap it, and enter a pin to authorize a request. This is more ideal than having to perform a full browser based authentication ceremony, finding your phone to perform authorization from an app, or replacing an expired access token."),(0,o.kt)("p",null,"Some developers may not be familiar with SSH, or how to use the tools to generate the keys. The instructions below can be used to allow a developer to quickly bootstrap their environment with a ready to use SSH key, without requiring them to know the ins-and-outs of SSH."),(0,o.kt)("p",null,"Below we will demonstrate how to ",(0,o.kt)("strong",{parentName:"p"},"manually")," perform the generation and addition of an SSH key to your account. If you are looking for an automated tool, please see the ",(0,o.kt)("a",{parentName:"p",href:"#5-minute-quickstart"},"5 min quickstart section above")),(0,o.kt)("h4",{id:"generate-an-ssh-key"},"Generate an SSH key"),(0,o.kt)("p",null,"We will begin by generating a new SSH key, and adding it to your SSH agent."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Ensure that you are using OpenSSH 8.2 or later"),(0,o.kt)("li",{parentName:"ol"},"Run the command below to generate a new SSH key")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'ssh-keygen -t ed25519-sk -C "your_email_here" -O resident -f $HOME/.ssh/id_ed25519_sk\n\n# When prompted to enter a passphrase, you can choose whether or not to include one\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Below are some details about the command used above."),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Ensure that you are using the -sk options when creating the key. This will ensure that key generation is done from a hardware security key"),(0,o.kt)("li",{parentName:"ul"},"We are leveraging ed25519-sk, but feel free to leverage ecdsa-sk as both algorithm types are supported by GitHub and GitLab; the YubiKey is capable of generating both"),(0,o.kt)("li",{parentName:"ul"},"Ensure you replace the -C parameter with your email address"),(0,o.kt)("li",{parentName:"ul"},"We are setting the option to use a resident key - This will make it easier to use your YubiKey to import and export the SSH key to other devices"))),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Start your ssh-agent in the background")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'eval "$(ssh-agent -s)"\n')),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"If on ",(0,o.kt)("strong",{parentName:"li"},"macOS"),", create and configure the SSH config file (",(0,o.kt)("strong",{parentName:"li"},"If on Windows or Linux, please skip this step and proceed to step 5"),")")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'touch $HOME/.ssh/config\n\necho "Host github.com\n  AddKeysToAgent yes\n  IdentityFile ~/.ssh/id_ed25519_sk" >> $HOME/.ssh/config\n')),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Add the key to your SSH agent")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ssh-add $HOME/.ssh/id_ed25519_sk\n\n# If you generated a key on macOS WITH a passphrase, then use the following command\nssh-add --apple-use-keychain $HOME/.ssh/id_ed25519_sk\n")),(0,o.kt)("h4",{id:"add-the-ssh-key-to-your-account"},"Add the SSH key to your account"),(0,o.kt)("p",null,"Now that they key has been created, use the following guides to add the SSH key to your account for authentication"),(0,o.kt)(r.Z,{groupId:"source-control-type",className:"my_tabs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"GitHub",label:"GitHub",default:!0,mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account?tool=webui"},"Adding a new SSH key to your account")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"When prompted for ",(0,o.kt)("strong",{parentName:"p"},"Key type"),", ensure that you select the appropriate option. Note that you can use the same SSH key for both operations, you will just need to add it twice (once for each key type)"),(0,o.kt)("p",{parentName:"admonition"},"Authentication key will be used for authentication using SSH"),(0,o.kt)("p",{parentName:"admonition"},"Signing key will be used for commit signing"))),(0,o.kt)(i.Z,{value:"GitLab",label:"GitLab",mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/user/ssh.html#add-an-ssh-key-to-your-gitlab-account"},"Add an SSH key to your GitLab account")))),(0,o.kt)("h2",{id:"commit-signing"},"Commit Signing"),(0,o.kt)("p",null,"Next let\u2019s go over how a developer can enable commit signing in their environment. The goal is to provide the source control tool the ability to determine if the code being added came from a trustworthy, and valid source. Verification of the source can be done using the same public key cryptography mechanism that we used for authentication."),(0,o.kt)("p",null,"See below for an example of how a commit will appear when signed vs when not signed."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Example of signed and unsigned commits",src:a(2234).Z,width:"2014",height:"564"})),(0,o.kt)("p",null,"This will allow for your team to employ two mechanisms to ensure that unsigned code is not added to your main branch:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Branch protection rules may prevent un-signed commits from being pushed to the repository"),(0,o.kt)("li",{parentName:"ul"},"This will provide a way for code reviewers to reject pull requests that contain un-signed commits")),(0,o.kt)("p",null,"To sign commits the developer needs to generate a public key, add the public key to their source control tool, and then enable a few settings in their local git environment to leverage the key to sign commits before they are pushed to source control."),(0,o.kt)("p",null,"Git commit signing is traditionally done with GPG keys, but many of the popular source control tools now allow you to leverage SSH keys. YubiKey supports both key types, so It\u2019s up to your security policies to determine which approach works best for your use case and environment. This guide will focus on leveraging SSH keys in order to create cohesion with the previous section on authentication keys. Also linked below is a YubicoLabs resource to walk you through how to create GPG keys."),(0,o.kt)("h3",{id:"using-ssh"},"Using SSH"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#generate-an-ssh-key"},"Follow the steps above")," to generate an SSH key using your YubiKey."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#add-the-ssh-key-to-your-account"},"Follow the steps above")," to add the SSH key for commit signing - ",(0,o.kt)("strong",{parentName:"li"},"Ensure that when prompted for ",(0,o.kt)("inlineCode",{parentName:"strong"},"Key type")," that you select ",(0,o.kt)("inlineCode",{parentName:"strong"},"Signing key"))),(0,o.kt)("li",{parentName:"ol"},"Once added to your account, run the following commands to ensure that commits are always signed, and that signing is performed using SSH")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git config --global gpg.format ssh\n\ngit config --global user.signingkey $HOME/.ssh/id_ed25519_sk\n\ngit config --global commit.gpgsign true\n")),(0,o.kt)("h3",{id:"using-gpg"},"Using GPG"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/YubicoLabs/sign-git-commits-yubikey"},"Yubico labs - Sign git commits YubiKey")))}m.isMDXComponent=!0},2234:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/commit_example-7cc9f34f8ae121db38dc41bf7a09c29c.png"}}]);